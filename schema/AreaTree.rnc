# Copyright 2016-2021 Antenna House, Inc. All rights reserved.

default namespace = "http://www.antennahouse.com/names/XSL/AreaTree"

start =
  AreaRoot

leader.rule.style =
   'none' | 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' |
   'ridge' | 'dot-dash' | 'dot-dot-dash' | 'wave'

border.style =
   leader.rule.style | 'hidden' | 'outset' | 'inset' | 'triple' |
   'double-wave' | 'thick-thin' | 'thin-thick' | 'thin-thick-thin' |
   'emboss' | 'imprint'

background-origin.style = 'border-box' | 'padding-box' | 'content-box'

length = xsd:NMTOKEN { pattern = "-?[0-9]+(\.[0-9]+)?(e-?[0-9]+)?(pt|in|mm|cm)" }
percent = xsd:string { pattern = "-?[0-9]+(\.[0-9]+)?%" }
length-or-auto = length | 'auto'
length-or-percent = length | percent
true-or-false = 'true' | 'false'

# Many areas produced from FO use only 'background-color' and
# 'background-setup'.  The same-named areas when produced from
# HTML/CSS may use more of these properties.
background.properties.attlist =
   attribute background-attachment { xsd:NCName }?,
   attribute background-clip { background-origin.style }?,
   attribute background-color { text }?,
   attribute background-content-height { length }?,
   attribute background-content-type { xsd:anyURI }?,
   attribute background-content-width { length }?,
   attribute background-image { text }?,
   attribute background-image-resolution { text }?,
   attribute background-origin { background-origin.style }?,
   attribute background-position-horizontal { length-or-percent }?,
   attribute background-position-vertical { length-or-percent }?,
   attribute background-repeat { xsd:NCName }?,
   attribute background-scaling { xsd:NCName }?,
   attribute background-setup { xsd:NCName }?,
   attribute background-size { text }?

border.properties.attlist =
   attribute border-after-color { text }?,
   attribute border-after-style { border.style }?,
   attribute border-after-width { length }?,
   attribute border-after-width.conditionality { xsd:NCName }?,
   attribute border-after-width.length { length }?,
   attribute border-before-color { text }?,
   attribute border-before-style { border.style }?,
   attribute border-before-width { length }?,
   attribute border-before-width.conditionality { xsd:NCName }?,
   attribute border-before-width.length { length }?,
   attribute border-bottom-left-radius { text }?,
   attribute border-bottom-right-radius { text }?,
   attribute border-clip-bottom { text }?,
   attribute border-clip-left { text }?,
   attribute border-clip-right { text }?,
   attribute border-clip-top { text }?,
   attribute border-double-thickness { text }?,
   attribute border-end-color { text }?,
   attribute border-end-style { border.style }?,
   attribute border-end-width { length }?,
   attribute border-end-width.conditionality { xsd:NCName }?,
   attribute border-length { text }?,
   attribute border-start-color { text }?,
   attribute border-start-style { border.style }?,
   attribute border-start-width { length }?,
   attribute border-start-width.conditionality { xsd:NCName }?,
   attribute border-top-left-radius { text }?,
   attribute border-top-right-radius { text }?,
   attribute border-triple-thickness { text }?,
   attribute border-wave-form { text }?,
   attribute box-shadow { text }?,
   attribute diagonal-border-color { text }?,
   attribute diagonal-border-style { border.style }?,
   attribute diagonal-border-width { length }?,
   attribute reverse-diagonal-border-color { text }?,
   attribute reverse-diagonal-border-style { border.style }?,
   attribute reverse-diagonal-border-width { length }?

border-separation.properties.attlist =
   attribute border-separation { length }?,
   attribute border-separation.block-progression-direction { length }?,
   attribute border-separation.inline-progression-direction { length }?

common.properties.attlist =
   attribute baseline-after { xsd:NMTOKEN }?,
   attribute baseline-offset { xsd:NMTOKEN }?,
   attribute bidi-level { xsd:integer }?,
   attribute bottom-position { length }?,
   attribute generated-by { text }?,
   attribute height { length }?,
   attribute is-first { true-or-false }?,
   attribute is-last { true-or-false }?,
   attribute language { xsd:NCName }?,
   attribute left-position { length }?,
   attribute pdftag { xsd:NMTOKEN }?,
   attribute reference-orientation { xsd:integer }?,
   attribute reverse-page-number { true-or-false }?,
   attribute right-position { length }?,
   attribute space-after { length }?,
   attribute space-before { length }?,
   attribute space-end { length }?,
   attribute space-start { length }?,
   attribute top-position { length }?,
   attribute width { length }?,
   attribute writing-mode { xsd:NCName }?,
   attribute z-index { xsd:integer }?,
   border.properties.attlist,
   font.properties.attlist,
   padding.properties.attlist

crop.properties.attlist =
   attribute crop-area-visibility { xsd:NCName }?,
   attribute crop-offset-bottom { xsd:NMTOKEN }?,
   attribute crop-offset-left { xsd:NMTOKEN }?,
   attribute crop-offset-right { xsd:NMTOKEN }?,
   attribute crop-offset-top { xsd:NMTOKEN }?

display.properties.attlist =
   attribute display { xsd:NCName }?,
   attribute display-role { xsd:NCName }?

font.properties.attlist =
   attribute font-family { text }?,
   attribute font-selection-strategy { xsd:NCName }?,
   attribute font-size { length }?,
   attribute font-stretch { text }?,
   attribute font-style { 'normal' | 'italic' | 'oblique' | 'backslant' }?,
   attribute font-variant { text }?,
   attribute font-weight { '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' }?

line-continued-mark.properties.attlist =
   attribute line-continued-mark { text }?,
   attribute line-continued-mark-background-color { text }?,
   attribute line-continued-mark-color { text }?,
   attribute line-continued-mark-font-family { xsd:NCName }?,
   attribute line-continued-mark-font-size { xsd:NMTOKEN }?,
   attribute line-continued-mark-font-style { xsd:NCName }?,
   attribute line-continued-mark-font-weight { xsd:integer }?,
   attribute line-continued-mark-offset { xsd:NMTOKEN }?

line-number.properties.attlist =
   attribute line-number { xsd:NCName }?,
   attribute line-number-background-color { text }?,
   attribute line-number-color { text }?,
   attribute line-number-font-family { xsd:NCName }?,
   attribute line-number-font-size { length }?,
   attribute line-number-font-style { xsd:NCName }?,
   attribute line-number-font-weight { xsd:integer }?,
   attribute line-number-initial { xsd:integer }?,
   attribute line-number-interval { xsd:integer }?,
   attribute line-number-offset { xsd:NMTOKEN }?,
   attribute line-number-position { xsd:NCName }?,
   attribute line-number-reset { xsd:NCName }?,
   attribute line-number-start { xsd:integer }?,
   attribute line-number-text-align { text }?,
   attribute line-number-text-decoration { xsd:NCName }?

outline.properties.attlist =
   attribute outline-expand { true-or-false }?,
   attribute outline-group { xsd:NCName }?,
   attribute outline-level { xsd:integer }?,
   attribute outline-title { text }?

padding.properties.attlist =
   attribute padding-after { length }?,
   attribute padding-after.conditionality { xsd:NMTOKEN }?,
   attribute padding-after.length { length }?,
   attribute padding-before { length }?,
   attribute padding-before.conditionality { xsd:NMTOKEN }?,
   attribute padding-before.length { length }?,
   attribute padding-end { length }?,
   attribute padding-end.conditionality { xsd:NMTOKEN }?,
   attribute padding-start { length }?,
   attribute padding-start.conditionality { xsd:NMTOKEN }?

printer-marks.properties.attlist =
   attribute marks { text }?, # For HTML/CSS
   attribute printer-marks { text }?,
   attribute printer-marks-line-color { xsd:NCName }?,
   attribute printer-marks-line-length { length-or-auto }?,
   attribute printer-marks-line-width { length-or-auto }?,
   attribute printer-marks-spine-width { length }?,
   attribute printer-marks-zero-margin { xsd:NCName }?

relative-position.properties.attlist =
   attribute relative-position { xsd:NMTOKEN }?,
   attribute relative-position-left { xsd:NMTOKEN }?,
   attribute relative-position-top { xsd:NMTOKEN }?

text.properties.attlist =
   attribute text-align { text }?,
   attribute text-align-first { xsd:NCName }?,
   attribute text-align-last { xsd:NCName }?,
   attribute text-altitude { text }?,
   attribute text-depth { text }?,
   attribute text-line-color { text }?,
   attribute text-line-style { xsd:NCName }?,
   attribute text-line-width { length }?,
   attribute text-shadow { text }?,
   attribute text-transform { xsd:NCName }?,
   attribute text-underline-position { text }?,
   text-decoration.properties.attlist

text-decoration.properties.attlist =
   attribute text-decoration-color { text }?,
   attribute text-decoration-style { text }?

transform.properties.attlist =
   attribute transform-origin { text }?,
   attribute transform.a { xsd:decimal }?,
   attribute transform.b { xsd:decimal }?,
   attribute transform.c { xsd:decimal }?,
   attribute transform.d { xsd:decimal }?,
   attribute transform.e { xsd:NMTOKEN }?,
   attribute transform.f { xsd:NMTOKEN }?

# List of annotation-related properties common to block-level and
# inline-level formatting objects
annotation.attlist =
   annotation-author,
   annotation-border-color,
   annotation-border-style,
   annotation-border-width,
   annotation-color,
   annotation-contents,
   annotation-file-attachment,
   annotation-flags,
   annotation-font-family,
   annotation-font-size,
   annotation-font-style,
   annotation-font-weight,
   annotation-height,
   annotation-icon-name,
   annotation-open,
   annotation-position-horizontal,
   annotation-position-vertical,
   annotation-text-align,
   annotation-text-color,
   annotation-title,
   annotation-type,
   annotation-width

# @annotation-author
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-author
annotation-author =
   ## Author of the annotation: <string>
   attribute annotation-author { text }?

# @annotation-border-color
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-border-color
annotation-border-color =
   ## Border color of the free text annotation: <color>
   attribute annotation-border-color { text }?

# @annotation-border-style
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-border-style
annotation-border-style =
   ## Border style of the free text annotation: solid | dotted | dashed | dot-dash | dot-dot-dash
   attribute annotation-border-style { 'solid' | 'dotted' | 'dashed' | 'dot-dash' | 'dot-dot-dash' }?

# @annotation-border-width
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-border-width
annotation-border-width =
   ## Border width of the free text annotation: <border-width>
   attribute annotation-border-width { text }?

# @annotation-color
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-color
annotation-color =
   ## Color used for the background of the annotation: <color> | none
   attribute annotation-color { text }?

# @annotation-contents
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-contents
annotation-contents =
   ## Content of the annotation: <string>
   attribute annotation-contents { text }?

# @annotation-file-attachment
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-file-attachment
annotation-file-attachment =
   ## File with which file attachment annotation is related: <uri-specification>
   attribute annotation-file-attachment { xsd:anyURI }?

# @annotation-flags
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-flags
annotation-flags =
   ## Characteristics of the annotation: Invisible | Hidden | Print | NoZoom | NoRotate | NoView | ReadOnly | Locked | ToggleNoView | LockedContents
   attribute annotation-flags { 'Invisible' | 'Hidden' | 'Print' | 'NoZoom' | 'NoRotate' | 'NoView' | 'ReadOnly' | 'Locked' | 'ToggleNoView' | 'LockedContents' }?

# @annotation-font-family
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-font-family
annotation-font-family =
   ## Font family of the free text annotation: <string>
   attribute annotation-font-family { text }?

# @annotation-font-size
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-font-size
annotation-font-size =
   ## Font size of the free text annotation: <string>
   attribute annotation-font-size { text }?

# @annotation-font-style
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-font-style
annotation-font-style =
   ## Font style of the free text annotation: <string>
   attribute annotation-font-style { text }?

# @annotation-font-weight
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-font-weight
annotation-font-weight =
   ## Font weight of the free text annotation: <string>
   attribute annotation-font-weight { text }?

# @annotation-height
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-height
annotation-height =
   ## Height of the annotation: <length>
   attribute annotation-height { text }?

# @annotation-icon-name
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-icon-name
annotation-icon-name =
   ## Name of the icon used for displaying the annotation: <string>
   attribute annotation-icon-name { text }?

# @annotation-open
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-open
annotation-open =
   ## Initial state of the annotation: true | false
   attribute annotation-open { 'true' | 'false' }?

# @annotation-position-horizontal
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-position-horizontal
annotation-position-horizontal =
   ## Horizontal position of the annotation: <length>
   attribute annotation-position-horizontal { text }?

# @annotation-position-vertical
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-position-vertical
annotation-position-vertical =
   ## Vertical position of the annotation: <length>
   attribute annotation-position-vertical { text }?

# @annotation-text-align
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-text-align
annotation-text-align =
   ## Alignment of the free text annotation: <string>
   attribute annotation-text-align { 'left' | 'center' | 'right' }?

# @annotation-text-color
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-text-color
annotation-text-color =
   ## Color of the free text annotation: <string>
   attribute annotation-text-color { text }?

# @annotation-title
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-title
annotation-title =
   ## Title of the annotation: <string>
   attribute annotation-title { text }?

# @annotation-type
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-type
annotation-type =
   ## Type of the annotation: Empty string | Text | FreeText | Stamp | FileAttachment
   attribute annotation-type { ('Text' | 'FreeText' | 'Stamp' | 'FileAttachment')? }?

# @annotation-width
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.annotation-width
annotation-width =
   ## Width of the annotation: <length>
   attribute annotation-width { text }?

# @base-uri
#
# https://www.antennahouse.com/product/ahf65/ahf-ext.html#axf.base-uri
base-uri =
   ## Location which becomes the base of relative URI: <uri-specification>
   attribute base-uri { text }?

AreaRoot =
  element AreaRoot {
   AreaRoot.attlist,
   AreaRoot.model
}

AreaRoot.model =
  PageViewportArea+

AreaRoot.attlist =
   base-uri,
   attribute bookmark-tree.child { text }?,
   attribute bookmark-tree.color { text }?,
   attribute bookmark-tree.font-weight { xsd:NCName }?,
   attribute bookmark-tree.internal-destination { text }?,
   attribute bookmark-tree.next { text }?,
   attribute bookmark-tree.starting-state { xsd:NCName }?,
   attribute bookmark-tree.title { text }?,
   attribute color { text }?,
   attribute color-profile._CMYK { text }?,
   attribute color-profile._GRAYSCALE { text }?,
   attribute color-profile._RGB { text }?,
   attribute counter-reset { text }?,
   attribute country { text }?,
   attribute document-info.assert { text }?, # For HTML/CSS
   attribute document-info.author { text }?,
   attribute document-info.author-title { text }?,
   attribute document-info.copyright-info-url { text }?,
   attribute document-info.copyright-notice { text }?,
   attribute document-info.copyright-status { xsd:NCName }?,
   attribute document-info.description { text }?, # For HTML/CSS
   attribute document-info.description-writer { text }?,
   attribute document-info.document-title { text }?,
   attribute document-info.fitwindow { true-or-false }?,
   attribute document-info.flags { text }?, # For HTML/CSS
   attribute document-info.generator { text }?, # For HTML/CSS
   attribute document-info.keywords { text }?,
   attribute document-info.pagelayout { xsd:NCName }?,
   attribute document-info.pagemode { xsd:NCName }?,
   attribute document-info.subject { text }?,
   attribute document-info.viewport { text }?, # For HTML/CSS
   attribute document-info.xmp { text }?,
   attribute font-face { text }?,
   attribute generator { text }?,
   attribute id { xsd:NMTOKENS }?, # 'S' for HTML/CSS
   attribute is-CSS { true-or-false }?,
   attribute layer-settings { text }?,
   attribute output-volume-info.bookmark-include { xsd:NCName }?,
   attribute output-volume-info.document-info-include { xsd:NCName }?,
   attribute output-volume-info.format { xsd:integer }?,
   attribute output-volume-info.initial-volume-number { xsd:integer }?,
   attribute role { xsd:NMTOKEN }?,
   attribute text-align { text }?,
   attribute text-align-last { xsd:NCName }?,
   attribute version { xsd:decimal },
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist

PageViewportArea =
  element PageViewportArea {
   PageViewportArea.attlist,
   PageViewportArea.model
}

PageViewportArea.model =
  (PageReferenceArea, FixedViewportArea*)

PageViewportArea.attlist =
   attribute abs-page-number { xsd:integer },
   base-uri,
   attribute bleed-bottom { xsd:NMTOKEN }?,
   attribute bleed-left { xsd:NMTOKEN }?,
   attribute bleed-right { xsd:NMTOKEN }?,
   attribute bleed-top { xsd:NMTOKEN }?,
   attribute color { text }?, # For HTML/CSS
   attribute counter-increment { text }?, # For HTML/CSS
   attribute counter-reset { text }?, # For HTML/CSS
   attribute format { text },
   attribute id { xsd:NMTOKENS }?, # 'S' for HTML/CSS
   attribute is-link-destination { true-or-false }?,
   attribute output-volume-break { true-or-false }?,
   attribute output-volume-filename { xsd:NMTOKEN }?,
   attribute page-master { text }?,
   attribute page-number { xsd:integer },
   attribute page-number-prefix { xsd:NCName }?,
   attribute page-number-suffix { xsd:NMTOKEN }?,
   attribute stacking-context { xsd:NCName }?,
   attribute title { xsd:anyURI }?,
   background.properties.attlist,
   common.properties.attlist,
   crop.properties.attlist,
   display.properties.attlist,
   printer-marks.properties.attlist

PageReferenceArea =
  element PageReferenceArea {
   PageReferenceArea.attlist,
   PageReferenceArea.model
}

PageReferenceArea.model =
   (RegionViewportArea+ |
      (PageRegionViewportArea, MarginRegionViewportArea*))

PageReferenceArea.attlist =
   attribute display-role { xsd:NCName },
   attribute id { xsd:NMTOKENS }?, # 'S' for HTML/CSS, e.g., 'id="OBJECT tag"'
   attribute is-link-destination { true-or-false }?,
   common.properties.attlist,
   crop.properties.attlist # For HTML/CSS

PageRegionViewportArea =
  element PageRegionViewportArea {
   PageRegionViewportArea.attlist,
   PageRegionViewportArea.model
}

PageRegionViewportArea.model =
   PageRegionReferenceArea?

PageRegionViewportArea.attlist =
   base-uri, # For HTML/CSS
   attribute bleed-bottom { length }?, # For HTML/CSS
   attribute bleed-left { length }?, # For HTML/CSS
   attribute bleed-right { length }?, # For HTML/CSS
   attribute bleed-top { length }?, # For HTML/CSS
   attribute bottom-position { length }?, # '?' for HTML/CSS
   attribute color { text }?, # For HTML/CSS
   attribute counter-increment { text }?, # For HTML/CSS
   attribute counter-reset { text }?, # For HTML/CSS
   attribute display-role { xsd:NCName },
   attribute height { xsd:NMTOKEN },
   attribute is-first { true-or-false },
   attribute is-last { true-or-false },
   attribute left-position { length }?, # '?' for HTML/CSS
   attribute overflow { xsd:NMTOKEN }?, # For HTML/CSS
   attribute region { xsd:NCName },
   attribute region-name { text },
   attribute right-position { length }?, # '?' for HTML/CSS
   attribute top-position { length }?, # '?' for HTML/CSS
   attribute width { length },
   attribute writing-mode { text }?, # For HTML/CSS
   background.properties.attlist, # For HTML/CSS,
   border.properties.attlist, # For HTML/CSS,
   crop.properties.attlist, # For HTML/CSS,
   font.properties.attlist, # For HTML/CSS
   padding.properties.attlist, # For HTML/CSS,
   printer-marks.properties.attlist # For HTML/CSS

PageRegionReferenceArea =
  element PageRegionReferenceArea {
   PageRegionReferenceArea.attlist,
   PageRegionReferenceArea.model
}

PageRegionReferenceArea.model =
   (BlockArea | AbsoluteFloatArea
   | RelativeFloatArea |
   BlockAnchorArea | AbsoluteViewportArea | FixedViewportArea | BlockViewportArea # For HTML/CSS
    )+

PageRegionReferenceArea.attlist =
   attribute height { xsd:NMTOKEN },
   attribute is-first { true-or-false }?,
   attribute is-last { true-or-false }?,
   attribute width { length },
   attribute writing-mode { text }?, # For HTML/CSS
   display.properties.attlist

MarginRegionViewportArea =
  element MarginRegionViewportArea {
   MarginRegionViewportArea.attlist,
   MarginRegionViewportArea.model
}

MarginRegionViewportArea.model =
   MarginRegionReferenceArea

MarginRegionViewportArea.attlist =
   base-uri,
   attribute bottom-position { xsd:NMTOKEN }?,
   attribute color { text }?,
   attribute content { text }?,
   attribute height { xsd:NMTOKEN },
   attribute is-first { xsd:boolean },
   attribute is-last { xsd:boolean },
   attribute left-position { xsd:NMTOKEN }?,
   attribute list-style-type { text }?, # For HTML/CSS
   attribute region { xsd:NCName },
   attribute region-name { xsd:NCName },
   attribute right-position { xsd:NMTOKEN }?,
   attribute top-position { xsd:NMTOKEN }?,
   attribute width { xsd:NMTOKEN },
   attribute writing-mode { text }?, # For HTML/CSS
   background.properties.attlist, # For HTML/CSS
   border.properties.attlist, # For HTML/CSS
   font.properties.attlist,
   padding.properties.attlist,
   text.properties.attlist           

MarginRegionReferenceArea =
  element MarginRegionReferenceArea {
   MarginRegionReferenceArea.attlist,
   MarginRegionReferenceArea.model
}

MarginRegionReferenceArea.model =
   BlockArea? # '?' for HTML/CSS

MarginRegionReferenceArea.attlist =
   attribute display-role { xsd:NCName },
   attribute height { xsd:NMTOKEN },
   attribute is-first { xsd:boolean },
   attribute is-last { xsd:boolean },
   attribute width { xsd:NMTOKEN },
   attribute writing-mode { text }? # For HTML/CSS
           
FixedViewportArea =
  element FixedViewportArea {
   FixedViewportArea.attlist,
   FixedViewportArea.model
}

FixedViewportArea.model =
   FlowReferenceArea

FixedViewportArea.attlist =
   attribute absolute-or-fixed { true-or-false }?,
   attribute color { text }?, # For HTML/CSS
   attribute text-align { text }?,
   background.properties.attlist,
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist

FlowReferenceArea =
  element FlowReferenceArea {
   FlowReferenceArea.attlist,
   FlowReferenceArea.model
}

FlowReferenceArea.model =
   (BlockArea | BlockAnchorArea | TableAndCaptionArea | TableViewportArea | ListBlockArea |
    BlockViewportArea | AbsoluteViewportArea |
   LineArea | FootnoteArea | SideNoteArea # For HTML/CSS
   )*,  SideFloatArea?, RelativeFloatArea*, AbsoluteFloatArea*,
   (BlockArea | BlockAnchorArea | BlockViewportArea | TableViewportArea)* # For HTML/CSS

FlowReferenceArea.attlist =
   base-uri, # For HTML/CSS
   attribute content { text }?, # For HTML/CSS
   attribute counter-increment { text }?, # For HTML/CSS
   attribute counter-reset { text }?, # For HTML/CSS
   attribute external-destination { xsd:anyURI }?, # For HTML/CSS
   attribute id { xsd:NCName }?, # For HTML/CSS
   attribute is-link { true-or-false }?, # For HTML/CSS
   attribute is-link-destination { true-or-false }?, # For HTML/CSS
   attribute keep-together-within-dimension { text }?,
   attribute line-height { text }?, # For HTML/CSS
   attribute text-align { text }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist,
   line-continued-mark.properties.attlist # For HTML/CSS

RegionViewportArea =
  element RegionViewportArea {
   RegionViewportArea.attlist,
   RegionViewportArea.model
}

RegionViewportArea.model =
   RegionReferenceArea, SideNoteReferenceArea*

RegionViewportArea.attlist =
   attribute background-color { text }?,
   attribute background-content-height { xsd:NMTOKEN }?,
   attribute background-content-width { length }?,
   attribute background-image { text }?,
   attribute background-position-horizontal { text }?,
   attribute background-setup { xsd:NCName }?,
   base-uri,
   attribute display { xsd:NCName }?,
   attribute display-role { xsd:NCName }?,
   attribute flow { xsd:NCName }?,
   attribute overflow { xsd:NCName }?,
   attribute region { xsd:NCName },
   attribute region-name { xsd:NCName },
   attribute text-align { text }?,
   common.properties.attlist

RegionReferenceArea =
  element RegionReferenceArea {
   RegionReferenceArea.attlist,
   RegionReferenceArea.model
}

RegionReferenceArea.model =
   ((BlockArea | ListBlockArea | BlockAnchorArea | BlockViewportArea | AbsoluteViewportArea | TableViewportArea | TableAndCaptionArea)+ | MainReferenceArea)?,
      FootnoteReferenceArea?,
      BeforeFloatReferenceArea?,
      RelativeFloatArea*,
      AbsoluteFloatArea*

RegionReferenceArea.attlist =
   attribute display-role { xsd:NCName },
   common.properties.attlist,
   attribute line-height { length }?

MainReferenceArea =
  element MainReferenceArea {
   MainReferenceArea.attlist,
   MainReferenceArea.model
}

MainReferenceArea.model =
   (ColumnReferenceArea | SpanReferenceArea)*, AbsoluteFloatArea*

MainReferenceArea.attlist =
   common.properties.attlist

BeforeFloatReferenceArea =
  element BeforeFloatReferenceArea {
   BeforeFloatReferenceArea.attlist,
   BeforeFloatReferenceArea.model
}

BeforeFloatReferenceArea.model =
   BeforeFloatArea+

BeforeFloatReferenceArea.attlist =
   common.properties.attlist

BeforeFloatArea =
  element BeforeFloatArea {
   BeforeFloatArea.attlist,
   BeforeFloatArea.model
}

BeforeFloatArea.model =
   BlockArea+

BeforeFloatArea.attlist =
   common.properties.attlist

SideNoteReferenceArea =
  element SideNoteReferenceArea {
   SideNoteReferenceArea.attlist,
   SideNoteReferenceArea.model
}

SideNoteReferenceArea.model =
   SideNoteArea+

SideNoteReferenceArea.attlist =
   attribute display-role { xsd:NCName },
   common.properties.attlist

SideNoteArea =
  element SideNoteArea {
   SideNoteArea.attlist,
   SideNoteArea.model
}

SideNoteArea.model =
   (BlockArea | BlockViewportArea)

SideNoteArea.attlist =
   base-uri, # For HTML/CSS
   attribute content { text }?, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist

ColumnReferenceArea =
  element ColumnReferenceArea {
   ColumnReferenceArea.attlist,
   ColumnReferenceArea.model
}

ColumnReferenceArea.model =
   (FlowReferenceArea | NormalFlowReferenceArea), AbsoluteFloatArea*, FootnoteReferenceArea?, ColumnruleArea*, RevisionbarArea*

ColumnReferenceArea.attlist =
   base-uri, # For HTML/CSS
   attribute counter-increment { text }?, # For HTML/CSS
   attribute counter-reset { text }?, # For HTML/CSS
   attribute text-align { text }?,
   common.properties.attlist,
   display.properties.attlist,
   line-continued-mark.properties.attlist # For HTML/CSS

TableAndCaptionArea =
  element TableAndCaptionArea {
   TableAndCaptionArea.attlist,
   TableAndCaptionArea.model
}

TableAndCaptionArea.model =
   (TableCaptionViewportArea, TableViewportArea) |
   (TableViewportArea, TableCaptionViewportArea?) # '?' for HTML/CSS

TableAndCaptionArea.attlist =
   attribute background-color { text }?,
   attribute background-setup { xsd:NCName }?,
   attribute id { xsd:NMTOKEN }?,
   attribute is-link-destination { true-or-false }?,
   attribute table-summary { text }?, # For HTML/CSS
   attribute text-align { text }?,
   common.properties.attlist,
   border-separation.properties.attlist,
   display.properties.attlist

TableCaptionViewportArea =
  element TableCaptionViewportArea {
   TableCaptionViewportArea.attlist,
   TableCaptionViewportArea.model
}

TableCaptionViewportArea.model =
   TableCaptionArea

TableCaptionViewportArea.attlist =
   attribute keep-with-next { xsd:NCName }?,
   attribute keep-with-previous { xsd:NCName }?,
   attribute text-align { text }?,
   attribute text-decoration-color { text }?,
   attribute text-decoration-style { text }?,
   background.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist

TableCaptionArea =
  element TableCaptionArea {
   TableCaptionArea.attlist,
   TableCaptionArea.model
}

TableCaptionArea.model =
   BlockArea* |
   LineArea+ # For HTML/CSS

TableCaptionArea.attlist =
   attribute display-role { xsd:NCName },
   common.properties.attlist

BlockAnchorArea =
  element BlockAnchorArea {
   BlockAnchorArea.attlist,
   BlockAnchorArea.model
}

BlockAnchorArea.model =
   LineArea*

BlockAnchorArea.attlist =
   attribute id { xsd:NMTOKEN }?, # For HTML/CSS
   attribute is-link-destination { true-or-false }?, # For HTML/CSS
   attribute keep-with-next { xsd:NCName }?,
   common.properties.attlist,
   display.properties.attlist

RelativeFloatArea =
  element RelativeFloatArea {
   RelativeFloatArea.attlist,
   RelativeFloatArea.model
}

RelativeFloatArea.model =
   (BlockArea | BlockViewportArea | TableAndCaptionArea | TableViewportArea)*

RelativeFloatArea.attlist =
   base-uri,
   attribute color { text }?,
   attribute content { text }?,
   attribute counter-increment { text }?, # For HTML/CSS
   attribute display { xsd:NCName },
   attribute display-role { xsd:NCName },
   attribute id { xsd:NMTOKEN }?, # For HTML/CSS
   attribute is-link-destination { true-or-false }?, # For HTML/CSS
   attribute keep-together-within-dimension { text }?,
   attribute text-align { text }?,
   attribute text-align-last { text }?,
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   outline.properties.attlist, # For HTML/CSS
   text-decoration.properties.attlist # For HTML/CSS

BlockViewportArea =
  element BlockViewportArea {
   BlockViewportArea.attlist,
   BlockViewportArea.model
}

BlockViewportArea.model =
   FlowReferenceArea | MultiColumnReferenceArea |
   GraphicArea # For HTML/CSS

BlockViewportArea.attlist =
   base-uri,
   attribute color { text }?,
   attribute content { text }?,
   attribute counter-reset { text }?, # For HTML/CSS
   attribute display { xsd:NCName },
   attribute display-role { xsd:NCName },
   attribute graphic-image { text }?,
   attribute id { xsd:NMTOKEN }?,
   attribute is-link-destination { true-or-false }?,
   attribute keep-together-within-dimension { text }?,
   attribute layer { xsd:NCName }?,
   attribute overflow { xsd:NCName }?,
   attribute overprint { text }?,
   attribute role { xsd:NMTOKEN }?,
   attribute text-align { text }?,
   attribute text-align-last { text }?,
   attribute text-line-width { length }?, # For HTML/CSS
   attribute text-underline-position { length }?, # For HTML/CSS
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   background.properties.attlist,
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   line-continued-mark.properties.attlist, # For HTML/CSS
   line-number.properties.attlist,
   relative-position.properties.attlist,
   text-decoration.properties.attlist # For HTML/CSS

MultiColumnReferenceArea =
  element MultiColumnReferenceArea {
   MultiColumnReferenceArea.attlist,
   MultiColumnReferenceArea.model
}

MultiColumnReferenceArea.model =
   (ColumnReferenceArea | SpanReferenceArea | AbsoluteFloatArea)+

MultiColumnReferenceArea.attlist =
   attribute display-role { xsd:NCName },
   common.properties.attlist

TableViewportArea =
  element TableViewportArea {
   TableViewportArea.attlist,
   TableViewportArea.model
}

TableViewportArea.model =
   TableArea

TableViewportArea.attlist =
   attribute border-collapse { xsd:NCName },
   attribute color { text }?, # For HTML/CSS
   attribute counter-increment { text }?, # For HTML/CSS
   attribute counter-reset { text }?, # For HTML/CSS
   attribute external-destination { text }?,
   attribute id { xsd:NMTOKEN }?,
   attribute is-link { true-or-false }?,
   attribute is-link-destination { true-or-false }?,
   attribute list-style-type { text }?, # For HTML/CSS
   attribute role { xsd:NMTOKEN }?,
   attribute table-summary { text }?,
   attribute text-align { text }?,
   attribute text-align-string { xsd:NCName }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   background.properties.attlist, # For HTML/CSS
   border-separation.properties.attlist,
   common.properties.attlist,
   display.properties.attlist

TableArea =
  element TableArea {
   TableArea.attlist,
   TableArea.model
}

TableArea.model =
   (TableColumnGroupArea*, TableColumnArea*, TableRowGroupArea*, TableRowArea*)

TableArea.attlist =
   attribute display { xsd:NCName }?,
   attribute display-role { xsd:NCName },
   attribute id { xsd:NMTOKEN }?,
   attribute role { xsd:NMTOKEN }?,
   attribute table-summary { text }?,
   attribute text-align { text }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   border-separation.properties.attlist,
   common.properties.attlist

TableColumnGroupArea =
  element TableColumnGroupArea {
   TableColumnGroupArea.model
}

TableColumnGroupArea.model =
   TableColumnArea+

TableColumnArea =
  element TableColumnArea {
   TableColumnArea.attlist,
   TableColumnArea.model
}

TableColumnArea.model =
   empty

TableColumnArea.attlist =
   attribute background-color { text },
   attribute background-setup { xsd:NCName },
   common.properties.attlist,
   attribute text-align { text }

TableRowGroupArea =
  element TableRowGroupArea {
   TableRowGroupArea.attlist,
   TableRowGroupArea.model
}

TableRowGroupArea.model =
   empty

TableRowGroupArea.attlist =
   attribute background-color { text },
   attribute background-setup { xsd:NCName },
   attribute id { xsd:NMTOKEN }?,
   attribute is-link-destination { true-or-false }?,
   common.properties.attlist,
   display.properties.attlist

TableRowArea =
  element TableRowArea {
   TableRowArea.attlist,
   TableRowArea.model
}

TableRowArea.model =
   TableCellArea+

TableRowArea.attlist =
   attribute background-color { text }?,
   attribute background-setup { xsd:NCName }?,
   attribute color { text }?,
   attribute id { xsd:NMTOKEN }?,
   attribute is-link-destination { true-or-false }?,
   attribute role { xsd:NMTOKEN }?,
   attribute row-group-number { xsd:decimal },
   attribute row-group-type { xsd:NCName },
   attribute text-align { text }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist

TableCellArea =
  element TableCellArea {
   TableCellArea.attlist,
   TableCellArea.model
}

TableCellArea.model =
   (BlockArea | BlockAnchorArea | TableAndCaptionArea | TableViewportArea | ListBlockArea | BlockViewportArea |
   AbsoluteFloatArea # For HTML/CSS
   )*, SideFloatArea?, RelativeFloatArea*, AbsoluteViewportArea*

TableCellArea.attlist =
   attribute color { text }?,
   attribute colspan { xsd:integer }?,
   attribute column-number { xsd:integer },
   attribute counter-increment { text }?, # For HTML/CSS
   attribute counter-reset { text }?, # For HTML/CSS
   attribute id { xsd:NMTOKEN }?,
   attribute is-link-destination { true-or-false }?,
   attribute relative-position { xsd:NMTOKEN }?,
   attribute repeat-cell-content-at-break { true-or-false }?,
   attribute role { xsd:NMTOKEN }?,
   attribute row-number { xsd:integer },
   attribute rowspan { xsd:integer }?,
   attribute scope { 'col' | 'row' | 'both' }?,
   attribute text-align { text }?,
   attribute text-align-last { text }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   background.properties.attlist,
   border-separation.properties.attlist,
   common.properties.attlist,
   display.properties.attlist

BlockArea =
  element BlockArea {
   BlockArea.attlist,
   BlockArea.model
}

BlockArea.model =
   (BlockArea |
      BlockAnchorArea |
      BlockViewportArea |
      FormArea |
      LineArea |
      TableAndCaptionArea |
      TableViewportArea |
      ListBlockArea)*

BlockArea.attlist =
   base-uri,
   attribute box-decoration-break { xsd:NCName }?, # For HTML/CSS
   attribute color { text }?,
   attribute content { text }?,
   attribute counter-increment { text }?,
   attribute counter-reset { text }?,
   attribute destination-type { text }?,
   attribute display { xsd:NCName }?,
   attribute display-role { xsd:NCName }?,
   attribute external-destination { text }?,
   attribute graphic-image { text }?,
   attribute id { text }?, # Empty @id seen in HTML/CSS
   attribute index-class { xsd:NCName }?,
   attribute index-key { text }?,
   attribute intrinsic-scale-value { text }?,
   attribute internal-destination { text }?,
   attribute is-link { true-or-false }?,
   attribute is-link-destination { true-or-false }?,
   attribute keep-with-next { xsd:NCName }?,
   attribute layer { text }?,
   attribute layer-settings { text }?, # For HTML/CSS
   attribute line-height { length }?,
   attribute list-style-image { text }?,
   attribute list-style-type { text }?,
   attribute number-transform { text }?,
   attribute overprint { text }?,
   attribute page-number-treatment { xsd:NMTOKEN }?,
   attribute role { xsd:NMTOKEN }?,
   attribute rule-thickness { xsd:NMTOKEN }?,
   attribute stacking-context { xsd:NCName }?, # For HTML/CSS
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   annotation.attlist,
   background.properties.attlist,
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   line-continued-mark.properties.attlist,
   line-number.properties.attlist,
   outline.properties.attlist,
   relative-position.properties.attlist,
   text.properties.attlist,
   transform.properties.attlist

 SideFloatArea =
  element SideFloatArea {
   SideFloat.model
}

SideFloat.model =
   (BlockArea | BlockAnchorArea | TableAndCaptionArea | TableViewportArea | ListBlockArea | BlockViewportArea)+

ListBlockArea =
  element ListBlockArea {
   ListBlockArea.attlist,
   ListBlockArea.model
}

ListBlockArea.model =
   ListItemArea*

ListBlockArea.attlist =
   attribute color { text }?,
   attribute id { xsd:NMTOKEN }?,
   attribute internal-destination { text }?,
   attribute is-link { true-or-false }?,
   attribute is-link-destination { true-or-false }?,
   attribute text-align { text }?,
   common.properties.attlist,
   outline.properties.attlist

ListItemArea =
  element ListItemArea {
   ListItemArea.attlist,
   ListItemArea.model
}

ListItemArea.model =
   (ListItemLabelArea?, ListItemBodyArea)

ListItemArea.attlist =
   attribute id { xsd:NMTOKEN }?,
   common.properties.attlist,
   attribute is-link-destination { true-or-false }?

ListItemLabelArea =
  element ListItemLabelArea {
   ListItemLabelArea.attlist,
   ListItemLabelArea.model
}

ListItemLabelArea.model =
   (BlockArea | BlockAnchorArea | TableAndCaptionArea | TableViewportArea | ListBlockArea | SideFloatArea | BlockViewportArea | AbsoluteViewportArea)+

ListItemLabelArea.attlist =
   common.properties.attlist,
   attribute text-align { text }?

ListItemBodyArea =
  element ListItemBodyArea {
   ListItemBodyArea.attlist,
   ListItemBodyArea.model
}

ListItemBodyArea.model =
   (BlockArea | BlockAnchorArea | TableAndCaptionArea | TableViewportArea | ListBlockArea | BlockViewportArea)*, SideFloatArea?, AbsoluteViewportArea*

ListItemBodyArea.attlist =
   attribute id { xsd:NMTOKEN }?,
   attribute is-link-destination { true-or-false }?,
   attribute text-align { text }?,
   common.properties.attlist

AbsoluteViewportArea =
  element AbsoluteViewportArea {
   AbsoluteViewportArea.attlist,
   AbsoluteViewportArea.model
}

AbsoluteViewportArea.model =
   FlowReferenceArea |
   GraphicArea # For HTML/CSS

AbsoluteViewportArea.attlist =
   attribute absolute-or-fixed { true-or-false }?,
   attribute background-attachment { xsd:NCName }?,
   attribute background-color { text }?,
   attribute background-content-height { xsd:NMTOKEN }?,
   attribute background-content-width { length }?,
   attribute background-image { text }?,
   attribute background-repeat { xsd:NCName }?,
   attribute background-setup { xsd:NCName }?,
   base-uri,
   attribute color { text }?,
   attribute content { text }?,
   attribute id { xsd:NMTOKEN }?,
   attribute is-link-destination { true-or-false }?,
   attribute layer { xsd:NCName }?,
   attribute overflow { xsd:NCName }?,
   attribute overprint { text }?,
   attribute stacking-context { xsd:NCName }?, # For HTML/CSS
   attribute text-align { text }?,
   attribute text-align-last { xsd:NCName }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   annotation.attlist,
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist

RevisionbarArea =
  element RevisionbarArea {
   RevisionbarArea.attlist,
   RevisionbarArea.model
}

RevisionbarArea.model =
   empty

RevisionbarArea.attlist =
   attribute change-bar-class { xsd:NCName }?,
   attribute role { text }?,
   common.properties.attlist

ColumnruleArea =
  element ColumnruleArea {
   ColumnruleArea.attlist,
   ColumnruleArea.model
}

ColumnruleArea.model =
   empty

ColumnruleArea.attlist =
   common.properties.attlist

SpanReferenceArea =
  element SpanReferenceArea {
   SpanReferenceArea.attlist,
   SpanReferenceArea.model
}

SpanReferenceArea.model =
   (NormalFlowReferenceArea | FlowReferenceArea), FootnoteReferenceArea?, ColumnruleArea?, RevisionbarArea*, AbsoluteFloatArea*

SpanReferenceArea.attlist =
   base-uri, # For HTML/CSS
   attribute counter-increment { text }?, # For HTML/CSS
   attribute counter-reset { text }?, # For HTML/CSS
   attribute text-align { text }?,
   common.properties.attlist,
   display.properties.attlist

AbsoluteFloatArea =
  element AbsoluteFloatArea {
   AbsoluteFloatArea.attlist,
   AbsoluteFloatArea.model
}

AbsoluteFloatArea.model =
   (BlockArea | BlockViewportArea | FootnoteArea)+

AbsoluteFloatArea.attlist =
   attribute background-color { text }?, # For HTML/CSS
   attribute background-setup { xsd:NCName }?, # For HTML/CSS
   base-uri, # For HTML/CSS
   attribute content { text }?, # For HTML/CSS
   attribute counter-increment { text }?, # For HTML/CSS
   attribute counter-reset { text }?, # For HTML/CSS
   common.properties.attlist,
   text.properties.attlist,
   display.properties.attlist

FootnoteReferenceArea =
  element FootnoteReferenceArea {
   FootnoteReferenceArea.attlist,
   FootnoteReferenceArea.model
}

FootnoteReferenceArea.model =
   FootnoteArea*, RelativeFloatArea?

FootnoteReferenceArea.attlist =
   attribute display-align { xsd:NCName },
   common.properties.attlist

FootnoteArea =
  element FootnoteArea {
   FootnoteArea.attlist,
   FootnoteArea.model
}

FootnoteArea.model =
   BlockArea* | ListBlockArea*

FootnoteArea.attlist =
   attribute keep-with-next { xsd:NCName }?,
   attribute text-align { text }?,
   attribute text-align-last { text }?,
   attribute visibility { xsd:NCName }?,
   common.properties.attlist,
   display.properties.attlist

RubyArea =
  element RubyArea {
   RubyArea.attlist,
   RubyArea.model
}

RubyArea.model =
   RubyContainerArea+

RubyArea.attlist =
   attribute id { xsd:NMTOKEN }?,
   attribute is-link-destination { true-or-false }?,
   attribute text-altitude { text }?,
   attribute text-depth { text }?,
   common.properties.attlist,
   display.properties.attlist

RubyContainerArea =
  element RubyContainerArea {
   RubyContainerArea.attlist,
   RubyContainerArea.model
}

RubyContainerArea.model =
      ruby.FlowReferenceArea

ruby.FlowReferenceArea =
  element FlowReferenceArea {
      FlowReferenceArea.attlist,
      ruby.FlowReferenceArea.model
}

ruby.FlowReferenceArea.model =
   RubyBaseArea, RubyTextArea

RubyContainerArea.attlist =
   attribute text-align { text },
   attribute text-align-last { text },
   common.properties.attlist,
   display.properties.attlist

RubyBaseArea =
  element RubyBaseArea {
   RubyBaseArea.attlist,
   RubyBaseArea.model
}

RubyBaseArea.model =
   LineArea+

RubyBaseArea.attlist =
   common.properties.attlist,
   display.properties.attlist

RubyTextArea =
  element RubyTextArea {
   RubyTextArea.attlist,
   RubyTextArea.model
}

RubyTextArea.model =
   LineArea

RubyTextArea.attlist =
   attribute color { text }?,
   common.properties.attlist,
   display.properties.attlist

LineArea =
  element LineArea {
   LineArea.attlist,
   LineArea.model
}

LineArea.model =
   (TextArea | LeaderArea | InlineArea | InlineAnchorArea | InlineViewportArea | GraphicViewportArea | BidiOverrideArea | RubyArea | FormFieldArea)*

LineArea.attlist =
   attribute background-setup { text }?,
   attribute id { xsd:NMTOKEN }?,
   attribute display { xsd:NCName }?,
   attribute display-role { xsd:NCName }?,
   attribute keep-together-within-dimension { text }?,
   attribute text-align { text }?,
   attribute text-altitude { text }?,
   attribute text-depth { text }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   common.properties.attlist,
   relative-position.properties.attlist

FormFieldArea =
  element FormFieldArea {
   FormFieldArea.attlist,
   FormFieldArea.model
}

FormFieldArea.model =
   TextArea*

FormFieldArea.attlist =
   attribute action-type { xsd:NCName }?,
   attribute background-color { text }?,
   attribute background-setup { xsd:NCName }?,
   base-uri,
   attribute color { text }?,
   attribute content-height { xsd:NMTOKEN }?,
   attribute content-width { length }?,
   attribute external-destination { text }?,
   attribute field-apply-signature { true-or-false }?,
   attribute field-button-face { text }?,
   attribute field-button-face-down { text }?,
   attribute field-button-face-rollover { text }?,
   attribute field-button-icon { text }?,
   attribute field-button-icon-down { text }?,
   attribute field-button-icon-rollover { text }?,
   attribute field-button-layout { xsd:NCName }?,
   attribute field-checked { true-or-false }?,
   attribute field-checked-style { xsd:NCName }?,
   attribute field-default-text { text }?,
   attribute field-description { text }?,
   attribute field-editable { true-or-false }?,
   attribute field-font-size { text }?,
   attribute field-maxlen { xsd:integer }?,
   attribute field-multiline { true-or-false }?,
   attribute field-multiple { true-or-false }?,
   attribute field-name { text }?,
   attribute field-password { true-or-false }?,
   attribute field-required { true-or-false }?,
   attribute field-scroll { true-or-false }?,
   attribute field-text-align { text }?,
   attribute field-top-index { xsd:integer }?,
   attribute field-type { xsd:NCName },
   attribute field-value { xsd:NCName }?,
   attribute form-field-event { text }?,
   attribute form-field-option { text }?,
   attribute is-link { true-or-false }?,
   attribute text-altitude { text }?,
   attribute text-depth { text }?,
   common.properties.attlist

FormArea =
  element FormArea {
   FormArea.attlist,
   FormArea.model
}

FormArea.model =
   BlockArea+

FormArea.attlist =
   base-uri,
   attribute external-destination { text }?,
   attribute field-submit-coordinates { true-or-false }?,
   attribute field-submit-method { xsd:NCName }?,
   common.properties.attlist

InlineAnchorArea =
  element InlineAnchorArea {
   InlineAnchorArea.attlist,
   InlineAnchorArea.model
}

InlineAnchorArea.model =
   (TextArea | LeaderArea | InlineArea | InlineViewportArea | GraphicViewportArea)*

InlineAnchorArea.attlist =
   common.properties.attlist,
   attribute display-role { xsd:NCName },
   attribute keep-with-next { xsd:NCName }?,
   attribute text-altitude { text }?,
   attribute text-depth { text }?

NormalFlowReferenceArea =
  element NormalFlowReferenceArea {
   NormalFlowReferenceArea.attlist,
   NormalFlowReferenceArea.model
}

NormalFlowReferenceArea.model =
   (BlockArea | BlockAnchorArea | TableAndCaptionArea | TableViewportArea | ListBlockArea | BlockViewportArea | AbsoluteViewportArea | FormArea)*, SideFloatArea?, RelativeFloatArea*, AbsoluteFloatArea*

NormalFlowReferenceArea.attlist =
   common.properties.attlist

TextArea =
  element TextArea {
   TextArea.attlist,
   TextArea.model
}

TextArea.model =
   GlyphArea* | EmphasisArea+

TextArea.attlist =
   attribute alttext { text }?,
   attribute background-color { text }?,
   attribute color { text },
   attribute correspond { text }?,
   attribute finished-text { text }?,
   attribute glyph-orientation { xsd:integer }?,
   attribute id { xsd:NMTOKEN }?,
   attribute is-link-destination { true-or-false }?,
   attribute kerning-mode { xsd:NCName }?,
   attribute origin-id { xsd:NMTOKEN }?,
   attribute overline-score { true-or-false }?,
   attribute overline-score-color { text }?,
   attribute overline-score-style { xsd:NCName }?,
   attribute overline-score-width { xsd:NCName }?,
   attribute ref-id { xsd:NCName }?,
   attribute ref-index-key { text }?,
   attribute scale-option { xsd:NCName }?,
   attribute script { text },
   attribute soft-hyphen-treatment { xsd:NCName }?,
   attribute text { text },
   attribute text-align-first { xsd:NCName }?,
   attribute text-align-last { xsd:NCName }?,
   attribute text-width { length },
   attribute through-score { true-or-false }?,
   attribute through-score-color { text }?,
   attribute through-score-style { xsd:NCName }?,
   attribute through-score-width { length-or-auto }?,
   attribute underline-score { true-or-false }?,
   attribute underline-score-color { text }?,
   attribute underline-score-position { text }?,
   attribute underline-score-style { xsd:NCName }?,
   attribute underline-score-width { length-or-auto }?,
   attribute vertical-underline-side { xsd:NCName }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   common.properties.attlist,
   relative-position.properties.attlist

GlyphArea =
element GlyphArea {
   GlyphArea.attlist,
   GlyphArea.model
}

GlyphArea.model =
   empty

GlyphArea.attlist =
   attribute glyph { xsd:integer },
   attribute glyph-width { xsd:integer },
   common.properties.attlist,
   attribute length { xsd:integer }

EmphasisArea =
  element EmphasisArea {
   EmphasisArea.attlist,
   EmphasisArea.model
}

EmphasisArea.model =
   empty

EmphasisArea.attlist =
   attribute color { text },
   attribute glyph-orientation { xsd:integer }?,
   common.properties.attlist,
   attribute kerning-mode { xsd:NCName },
   attribute script { text },
   attribute text { text },
   attribute text-width { length }

InlineArea =
  element InlineArea {
   InlineArea.attlist,
   InlineArea.model
}

InlineArea.model =
   (TextArea | LeaderArea | InlineArea | InlineAnchorArea | InlineViewportArea | GraphicViewportArea | RubyArea | BidiOverrideArea)*

InlineArea.attlist =
   attribute action-type { xsd:NCName }?,
   base-uri,
   attribute box-decoration-break { xsd:NCName }?, # For HTML/CSS
   attribute color { text }?,
   attribute content { text }?,
   attribute counter-increment { text }?, # For HTML/CSS
   attribute external-destination { text }?,
   attribute gui-action-type { xsd:NCName }?,
   attribute id { xsd:NMTOKENS }?, # 'S' for HTML/CSS, e.g., 'id="OBJECT tag"'
   attribute index-class { xsd:NCName }?,
   attribute index-key { text }?,
   attribute indicate-destination { true-or-false }?,
   attribute internal-destination { text }?,
   attribute is-link { true-or-false }?,
   attribute is-link-destination { true-or-false }?,
   attribute keep-with-next { xsd:NCName }?,
   attribute keep-with-previous { xsd:NCName }?,
   attribute number-transform { text }?,
   attribute origin-id { xsd:NMTOKEN }?,
   attribute outline-style { xsd:NCName }?, # For HTML/CSS
   attribute ref-id { xsd:NCName }?,
   attribute ref-index-key { text }?,
   attribute role { xsd:NMTOKEN }?,
   attribute scale-option { xsd:NCName }?,
   attribute show-destination { xsd:NCName }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   annotation.attlist,
   background.properties.attlist, # For HTML/CSS
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist,
   text.properties.attlist

InlineViewportArea =
  element InlineViewportArea {
   InlineViewportArea.attlist,
   InlineViewportArea.model
}

InlineViewportArea.model =
   FlowReferenceArea

InlineViewportArea.attlist =
   attribute base-uri { xsd:anyURI }?,
   attribute color { text }?,
   attribute content { text }?,
   attribute id { xsd:NCName }?, # For HTML/CSS
   attribute is-link-destination { true-or-false }?, # For HTML/CSS
   attribute number-transform { text }?,
   attribute overflow { xsd:NCName }?,
   attribute role { xsd:NMTOKEN }?,
   attribute text-align { text }?,
   attribute text-align-first { xsd:NCName }?,
   attribute text-align-last { xsd:NCName }?,
   attribute text-transform { xsd:NCName }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   background.properties.attlist, # For HTML/CSS,
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist

GraphicViewportArea =
  element GraphicViewportArea {
   GraphicViewportArea.attlist,
   GraphicViewportArea.model
}

GraphicViewportArea.model =
   GraphicArea

GraphicViewportArea.attlist =
   attribute base-uri { xsd:anyURI }?,
   attribute content { text }?,
   attribute color { text }?, # For HTML/CSS
   attribute clip.ax { text }?, # For HTML/CSS
   attribute clip.ay { text }?, # For HTML/CSS
   attribute clip.bx { text }?, # For HTML/CSS
   attribute clip.by { text }?, # For HTML/CSS
   attribute crop { text }?, # For HTML/CSS
   attribute crop.rect { text }?, # For HTML/CSS
   attribute crop.inset-rect { text }?, # For HTML/CSS
   attribute graphic-image { text }?, # For HTML/CSS
   attribute id { xsd:NMTOKEN }?,
   attribute index-class { xsd:NCName }?,
   attribute index-key { text }?,
   attribute is-link-destination { true-or-false }?,
   attribute media-play-mode { xsd:integer }?,
   attribute media-volume { text }?,
   attribute multimedia-treatment { text }?,
   attribute poster-image { text }?,
   attribute role { text }?,
   attribute show-controls { true-or-false }?,
   attribute text-align { text }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   background.properties.attlist, # For HTML/CSS
   border-separation.properties.attlist, # For HTML/CSS
   common.properties.attlist,
   display.properties.attlist,
   relative-position.properties.attlist

GraphicArea =
  element GraphicArea {
   GraphicArea.attlist,
   GraphicArea.model
}

GraphicArea.model =
   empty

GraphicArea.attlist =
   attribute base-uri { xsd:anyURI }?,
   attribute color { text },
   attribute content { text }?, # For HTML/CSS
   attribute content-type { xsd:anyURI }?,
   attribute crop { text }?, # For HTML/CSS
   attribute display-role { xsd:NCName },
   attribute graphic-image { text }?,
   attribute image-smoothing { true-or-false }?,
   attribute multimedia-treatment { text }?,
   attribute poster-image { text }?,
   attribute src { text }?,
   attribute visibility { xsd:NCName }?, # For HTML/CSS
   common.properties.attlist


LeaderArea =
  element LeaderArea {
   LeaderArea.attlist,
   LeaderArea.model
}

LeaderArea.model =
   (TextArea | LeaderArea | InlineArea | InlineViewportArea | GraphicViewportArea)*

LeaderArea.attlist =
   attribute color { text },
   attribute leader-alignment { xsd:NCName },
   attribute leader-pattern { 'space' | 'rule' | 'dots' | 'use-content' },
   attribute rule-style { leader.rule.style }?,
   attribute rule-thickness { length }?,
   attribute text-align-first { text }?,
   attribute text-align-last { text }?,
   attribute text-altitude { text }?,
   attribute text-depth { text }?,
   common.properties.attlist

BidiOverrideArea =
  element BidiOverrideArea {
   BidiOverrideArea.attlist,
   BidiOverrideArea.model
}

BidiOverrideArea.model =
   (TextArea | LeaderArea | InlineArea | InlineAnchorArea | InlineViewportArea | GraphicViewportArea | BidiOverrideArea)*

BidiOverrideArea.attlist =
   attribute direction { 'ltr' | 'rtl' },
   attribute poster-image { text }?,
   attribute src { text }?,
   attribute text-altitude { text }?,
   attribute text-depth { text }?,
   common.properties.attlist,
   display.properties.attlist
